// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IpcMessages.proto

#ifndef PROTOBUF_INCLUDED_IpcMessages_2eproto
#define PROTOBUF_INCLUDED_IpcMessages_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_IpcMessages_2eproto 

namespace protobuf_IpcMessages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_IpcMessages_2eproto
namespace CefAdapter {
class CefAdapterException;
class CefAdapterExceptionDefaultTypeInternal;
extern CefAdapterExceptionDefaultTypeInternal _CefAdapterException_default_instance_;
class CefAdapterReply;
class CefAdapterReplyDefaultTypeInternal;
extern CefAdapterReplyDefaultTypeInternal _CefAdapterReply_default_instance_;
class CreateBrowserWindowRequest;
class CreateBrowserWindowRequestDefaultTypeInternal;
extern CreateBrowserWindowRequestDefaultTypeInternal _CreateBrowserWindowRequest_default_instance_;
class ExecuteJavaScriptRequest;
class ExecuteJavaScriptRequestDefaultTypeInternal;
extern ExecuteJavaScriptRequestDefaultTypeInternal _ExecuteJavaScriptRequest_default_instance_;
class FromCefAdapterRequest;
class FromCefAdapterRequestDefaultTypeInternal;
extern FromCefAdapterRequestDefaultTypeInternal _FromCefAdapterRequest_default_instance_;
class OnBrowserClosedRequest;
class OnBrowserClosedRequestDefaultTypeInternal;
extern OnBrowserClosedRequestDefaultTypeInternal _OnBrowserClosedRequest_default_instance_;
class OnBrowserCreatedRequest;
class OnBrowserCreatedRequestDefaultTypeInternal;
extern OnBrowserCreatedRequestDefaultTypeInternal _OnBrowserCreatedRequest_default_instance_;
class OnContextCreatedRequest;
class OnContextCreatedRequestDefaultTypeInternal;
extern OnContextCreatedRequestDefaultTypeInternal _OnContextCreatedRequest_default_instance_;
class OnQueryRequest;
class OnQueryRequestDefaultTypeInternal;
extern OnQueryRequestDefaultTypeInternal _OnQueryRequest_default_instance_;
class QueryFailureRequest;
class QueryFailureRequestDefaultTypeInternal;
extern QueryFailureRequestDefaultTypeInternal _QueryFailureRequest_default_instance_;
class QuerySuccessRequest;
class QuerySuccessRequestDefaultTypeInternal;
extern QuerySuccessRequestDefaultTypeInternal _QuerySuccessRequest_default_instance_;
class SetBrowserWindowSizeRequest;
class SetBrowserWindowSizeRequestDefaultTypeInternal;
extern SetBrowserWindowSizeRequestDefaultTypeInternal _SetBrowserWindowSizeRequest_default_instance_;
class SetBrowserWindowTitleRequest;
class SetBrowserWindowTitleRequestDefaultTypeInternal;
extern SetBrowserWindowTitleRequestDefaultTypeInternal _SetBrowserWindowTitleRequest_default_instance_;
class ShowDeveloperToolsRequest;
class ShowDeveloperToolsRequestDefaultTypeInternal;
extern ShowDeveloperToolsRequestDefaultTypeInternal _ShowDeveloperToolsRequest_default_instance_;
class ToCefAdapterRequest;
class ToCefAdapterRequestDefaultTypeInternal;
extern ToCefAdapterRequestDefaultTypeInternal _ToCefAdapterRequest_default_instance_;
}  // namespace CefAdapter
namespace google {
namespace protobuf {
template<> ::CefAdapter::CefAdapterException* Arena::CreateMaybeMessage<::CefAdapter::CefAdapterException>(Arena*);
template<> ::CefAdapter::CefAdapterReply* Arena::CreateMaybeMessage<::CefAdapter::CefAdapterReply>(Arena*);
template<> ::CefAdapter::CreateBrowserWindowRequest* Arena::CreateMaybeMessage<::CefAdapter::CreateBrowserWindowRequest>(Arena*);
template<> ::CefAdapter::ExecuteJavaScriptRequest* Arena::CreateMaybeMessage<::CefAdapter::ExecuteJavaScriptRequest>(Arena*);
template<> ::CefAdapter::FromCefAdapterRequest* Arena::CreateMaybeMessage<::CefAdapter::FromCefAdapterRequest>(Arena*);
template<> ::CefAdapter::OnBrowserClosedRequest* Arena::CreateMaybeMessage<::CefAdapter::OnBrowserClosedRequest>(Arena*);
template<> ::CefAdapter::OnBrowserCreatedRequest* Arena::CreateMaybeMessage<::CefAdapter::OnBrowserCreatedRequest>(Arena*);
template<> ::CefAdapter::OnContextCreatedRequest* Arena::CreateMaybeMessage<::CefAdapter::OnContextCreatedRequest>(Arena*);
template<> ::CefAdapter::OnQueryRequest* Arena::CreateMaybeMessage<::CefAdapter::OnQueryRequest>(Arena*);
template<> ::CefAdapter::QueryFailureRequest* Arena::CreateMaybeMessage<::CefAdapter::QueryFailureRequest>(Arena*);
template<> ::CefAdapter::QuerySuccessRequest* Arena::CreateMaybeMessage<::CefAdapter::QuerySuccessRequest>(Arena*);
template<> ::CefAdapter::SetBrowserWindowSizeRequest* Arena::CreateMaybeMessage<::CefAdapter::SetBrowserWindowSizeRequest>(Arena*);
template<> ::CefAdapter::SetBrowserWindowTitleRequest* Arena::CreateMaybeMessage<::CefAdapter::SetBrowserWindowTitleRequest>(Arena*);
template<> ::CefAdapter::ShowDeveloperToolsRequest* Arena::CreateMaybeMessage<::CefAdapter::ShowDeveloperToolsRequest>(Arena*);
template<> ::CefAdapter::ToCefAdapterRequest* Arena::CreateMaybeMessage<::CefAdapter::ToCefAdapterRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CefAdapter {

enum ReplyType {
  Void = 0,
  Boolean = 1,
  Integer = 2,
  Double = 3,
  String = 4,
  Exception = 5,
  ReplyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReplyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReplyType_IsValid(int value);
const ReplyType ReplyType_MIN = Void;
const ReplyType ReplyType_MAX = Exception;
const int ReplyType_ARRAYSIZE = ReplyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReplyType_descriptor();
inline const ::std::string& ReplyType_Name(ReplyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReplyType_descriptor(), value);
}
inline bool ReplyType_Parse(
    const ::std::string& name, ReplyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReplyType>(
    ReplyType_descriptor(), name, value);
}
enum ToCefAdapterRequestType {
  Initialize = 0,
  CreateBrowserWindow = 1,
  SetBrowserWindowSize = 2,
  SetBrowserWindowTitle = 3,
  SetBrowserWindowIcon = 4,
  ShowDeveloperTools = 5,
  ExecuteJavaScript = 6,
  QuerySuccess = 7,
  QueryFailure = 8,
  ToCefAdapterRequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ToCefAdapterRequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ToCefAdapterRequestType_IsValid(int value);
const ToCefAdapterRequestType ToCefAdapterRequestType_MIN = Initialize;
const ToCefAdapterRequestType ToCefAdapterRequestType_MAX = QueryFailure;
const int ToCefAdapterRequestType_ARRAYSIZE = ToCefAdapterRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ToCefAdapterRequestType_descriptor();
inline const ::std::string& ToCefAdapterRequestType_Name(ToCefAdapterRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ToCefAdapterRequestType_descriptor(), value);
}
inline bool ToCefAdapterRequestType_Parse(
    const ::std::string& name, ToCefAdapterRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ToCefAdapterRequestType>(
    ToCefAdapterRequestType_descriptor(), name, value);
}
enum FromCefAdapterRequestType {
  FailedToInitialize = 0,
  Shutdown = 1,
  OnBrowserCreated = 2,
  OnBrowserClosed = 3,
  OnContextCreated = 4,
  OnQuery = 5,
  FromCefAdapterRequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FromCefAdapterRequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FromCefAdapterRequestType_IsValid(int value);
const FromCefAdapterRequestType FromCefAdapterRequestType_MIN = FailedToInitialize;
const FromCefAdapterRequestType FromCefAdapterRequestType_MAX = OnQuery;
const int FromCefAdapterRequestType_ARRAYSIZE = FromCefAdapterRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FromCefAdapterRequestType_descriptor();
inline const ::std::string& FromCefAdapterRequestType_Name(FromCefAdapterRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FromCefAdapterRequestType_descriptor(), value);
}
inline bool FromCefAdapterRequestType_Parse(
    const ::std::string& name, FromCefAdapterRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FromCefAdapterRequestType>(
    FromCefAdapterRequestType_descriptor(), name, value);
}
// ===================================================================

class CreateBrowserWindowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.CreateBrowserWindowRequest) */ {
 public:
  CreateBrowserWindowRequest();
  virtual ~CreateBrowserWindowRequest();

  CreateBrowserWindowRequest(const CreateBrowserWindowRequest& from);

  inline CreateBrowserWindowRequest& operator=(const CreateBrowserWindowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateBrowserWindowRequest(CreateBrowserWindowRequest&& from) noexcept
    : CreateBrowserWindowRequest() {
    *this = ::std::move(from);
  }

  inline CreateBrowserWindowRequest& operator=(CreateBrowserWindowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateBrowserWindowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateBrowserWindowRequest* internal_default_instance() {
    return reinterpret_cast<const CreateBrowserWindowRequest*>(
               &_CreateBrowserWindowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CreateBrowserWindowRequest* other);
  friend void swap(CreateBrowserWindowRequest& a, CreateBrowserWindowRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateBrowserWindowRequest* New() const final {
    return CreateMaybeMessage<CreateBrowserWindowRequest>(NULL);
  }

  CreateBrowserWindowRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateBrowserWindowRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateBrowserWindowRequest& from);
  void MergeFrom(const CreateBrowserWindowRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBrowserWindowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CefAdapter.CreateBrowserWindowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetBrowserWindowTitleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.SetBrowserWindowTitleRequest) */ {
 public:
  SetBrowserWindowTitleRequest();
  virtual ~SetBrowserWindowTitleRequest();

  SetBrowserWindowTitleRequest(const SetBrowserWindowTitleRequest& from);

  inline SetBrowserWindowTitleRequest& operator=(const SetBrowserWindowTitleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetBrowserWindowTitleRequest(SetBrowserWindowTitleRequest&& from) noexcept
    : SetBrowserWindowTitleRequest() {
    *this = ::std::move(from);
  }

  inline SetBrowserWindowTitleRequest& operator=(SetBrowserWindowTitleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetBrowserWindowTitleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetBrowserWindowTitleRequest* internal_default_instance() {
    return reinterpret_cast<const SetBrowserWindowTitleRequest*>(
               &_SetBrowserWindowTitleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SetBrowserWindowTitleRequest* other);
  friend void swap(SetBrowserWindowTitleRequest& a, SetBrowserWindowTitleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetBrowserWindowTitleRequest* New() const final {
    return CreateMaybeMessage<SetBrowserWindowTitleRequest>(NULL);
  }

  SetBrowserWindowTitleRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetBrowserWindowTitleRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetBrowserWindowTitleRequest& from);
  void MergeFrom(const SetBrowserWindowTitleRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBrowserWindowTitleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 browser_id = 1;
  void clear_browser_id();
  static const int kBrowserIdFieldNumber = 1;
  ::google::protobuf::int32 browser_id() const;
  void set_browser_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CefAdapter.SetBrowserWindowTitleRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 browser_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetBrowserWindowSizeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.SetBrowserWindowSizeRequest) */ {
 public:
  SetBrowserWindowSizeRequest();
  virtual ~SetBrowserWindowSizeRequest();

  SetBrowserWindowSizeRequest(const SetBrowserWindowSizeRequest& from);

  inline SetBrowserWindowSizeRequest& operator=(const SetBrowserWindowSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetBrowserWindowSizeRequest(SetBrowserWindowSizeRequest&& from) noexcept
    : SetBrowserWindowSizeRequest() {
    *this = ::std::move(from);
  }

  inline SetBrowserWindowSizeRequest& operator=(SetBrowserWindowSizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetBrowserWindowSizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetBrowserWindowSizeRequest* internal_default_instance() {
    return reinterpret_cast<const SetBrowserWindowSizeRequest*>(
               &_SetBrowserWindowSizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SetBrowserWindowSizeRequest* other);
  friend void swap(SetBrowserWindowSizeRequest& a, SetBrowserWindowSizeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetBrowserWindowSizeRequest* New() const final {
    return CreateMaybeMessage<SetBrowserWindowSizeRequest>(NULL);
  }

  SetBrowserWindowSizeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetBrowserWindowSizeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetBrowserWindowSizeRequest& from);
  void MergeFrom(const SetBrowserWindowSizeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBrowserWindowSizeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 browser_id = 1;
  void clear_browser_id();
  static const int kBrowserIdFieldNumber = 1;
  ::google::protobuf::int32 browser_id() const;
  void set_browser_id(::google::protobuf::int32 value);

  // int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CefAdapter.SetBrowserWindowSizeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 browser_id_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowDeveloperToolsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.ShowDeveloperToolsRequest) */ {
 public:
  ShowDeveloperToolsRequest();
  virtual ~ShowDeveloperToolsRequest();

  ShowDeveloperToolsRequest(const ShowDeveloperToolsRequest& from);

  inline ShowDeveloperToolsRequest& operator=(const ShowDeveloperToolsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowDeveloperToolsRequest(ShowDeveloperToolsRequest&& from) noexcept
    : ShowDeveloperToolsRequest() {
    *this = ::std::move(from);
  }

  inline ShowDeveloperToolsRequest& operator=(ShowDeveloperToolsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowDeveloperToolsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowDeveloperToolsRequest* internal_default_instance() {
    return reinterpret_cast<const ShowDeveloperToolsRequest*>(
               &_ShowDeveloperToolsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ShowDeveloperToolsRequest* other);
  friend void swap(ShowDeveloperToolsRequest& a, ShowDeveloperToolsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowDeveloperToolsRequest* New() const final {
    return CreateMaybeMessage<ShowDeveloperToolsRequest>(NULL);
  }

  ShowDeveloperToolsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowDeveloperToolsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowDeveloperToolsRequest& from);
  void MergeFrom(const ShowDeveloperToolsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowDeveloperToolsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 browser_id = 1;
  void clear_browser_id();
  static const int kBrowserIdFieldNumber = 1;
  ::google::protobuf::int32 browser_id() const;
  void set_browser_id(::google::protobuf::int32 value);

  // int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CefAdapter.ShowDeveloperToolsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 browser_id_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExecuteJavaScriptRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.ExecuteJavaScriptRequest) */ {
 public:
  ExecuteJavaScriptRequest();
  virtual ~ExecuteJavaScriptRequest();

  ExecuteJavaScriptRequest(const ExecuteJavaScriptRequest& from);

  inline ExecuteJavaScriptRequest& operator=(const ExecuteJavaScriptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecuteJavaScriptRequest(ExecuteJavaScriptRequest&& from) noexcept
    : ExecuteJavaScriptRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteJavaScriptRequest& operator=(ExecuteJavaScriptRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteJavaScriptRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteJavaScriptRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteJavaScriptRequest*>(
               &_ExecuteJavaScriptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ExecuteJavaScriptRequest* other);
  friend void swap(ExecuteJavaScriptRequest& a, ExecuteJavaScriptRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecuteJavaScriptRequest* New() const final {
    return CreateMaybeMessage<ExecuteJavaScriptRequest>(NULL);
  }

  ExecuteJavaScriptRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteJavaScriptRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecuteJavaScriptRequest& from);
  void MergeFrom(const ExecuteJavaScriptRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteJavaScriptRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // int32 browser_id = 1;
  void clear_browser_id();
  static const int kBrowserIdFieldNumber = 1;
  ::google::protobuf::int32 browser_id() const;
  void set_browser_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CefAdapter.ExecuteJavaScriptRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int32 browser_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuerySuccessRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.QuerySuccessRequest) */ {
 public:
  QuerySuccessRequest();
  virtual ~QuerySuccessRequest();

  QuerySuccessRequest(const QuerySuccessRequest& from);

  inline QuerySuccessRequest& operator=(const QuerySuccessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuerySuccessRequest(QuerySuccessRequest&& from) noexcept
    : QuerySuccessRequest() {
    *this = ::std::move(from);
  }

  inline QuerySuccessRequest& operator=(QuerySuccessRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuerySuccessRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuerySuccessRequest* internal_default_instance() {
    return reinterpret_cast<const QuerySuccessRequest*>(
               &_QuerySuccessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(QuerySuccessRequest* other);
  friend void swap(QuerySuccessRequest& a, QuerySuccessRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuerySuccessRequest* New() const final {
    return CreateMaybeMessage<QuerySuccessRequest>(NULL);
  }

  QuerySuccessRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuerySuccessRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuerySuccessRequest& from);
  void MergeFrom(const QuerySuccessRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySuccessRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string json_object = 2;
  void clear_json_object();
  static const int kJsonObjectFieldNumber = 2;
  const ::std::string& json_object() const;
  void set_json_object(const ::std::string& value);
  #if LANG_CXX11
  void set_json_object(::std::string&& value);
  #endif
  void set_json_object(const char* value);
  void set_json_object(const char* value, size_t size);
  ::std::string* mutable_json_object();
  ::std::string* release_json_object();
  void set_allocated_json_object(::std::string* json_object);

  // int64 query_id = 1;
  void clear_query_id();
  static const int kQueryIdFieldNumber = 1;
  ::google::protobuf::int64 query_id() const;
  void set_query_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CefAdapter.QuerySuccessRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr json_object_;
  ::google::protobuf::int64 query_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryFailureRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.QueryFailureRequest) */ {
 public:
  QueryFailureRequest();
  virtual ~QueryFailureRequest();

  QueryFailureRequest(const QueryFailureRequest& from);

  inline QueryFailureRequest& operator=(const QueryFailureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryFailureRequest(QueryFailureRequest&& from) noexcept
    : QueryFailureRequest() {
    *this = ::std::move(from);
  }

  inline QueryFailureRequest& operator=(QueryFailureRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFailureRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryFailureRequest* internal_default_instance() {
    return reinterpret_cast<const QueryFailureRequest*>(
               &_QueryFailureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(QueryFailureRequest* other);
  friend void swap(QueryFailureRequest& a, QueryFailureRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryFailureRequest* New() const final {
    return CreateMaybeMessage<QueryFailureRequest>(NULL);
  }

  QueryFailureRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryFailureRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryFailureRequest& from);
  void MergeFrom(const QueryFailureRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryFailureRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 3;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 3;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // int64 query_id = 1;
  void clear_query_id();
  static const int kQueryIdFieldNumber = 1;
  ::google::protobuf::int64 query_id() const;
  void set_query_id(::google::protobuf::int64 value);

  // int32 error_code = 2;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CefAdapter.QueryFailureRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::int64 query_id_;
  ::google::protobuf::int32 error_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ToCefAdapterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.ToCefAdapterRequest) */ {
 public:
  ToCefAdapterRequest();
  virtual ~ToCefAdapterRequest();

  ToCefAdapterRequest(const ToCefAdapterRequest& from);

  inline ToCefAdapterRequest& operator=(const ToCefAdapterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ToCefAdapterRequest(ToCefAdapterRequest&& from) noexcept
    : ToCefAdapterRequest() {
    *this = ::std::move(from);
  }

  inline ToCefAdapterRequest& operator=(ToCefAdapterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ToCefAdapterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToCefAdapterRequest* internal_default_instance() {
    return reinterpret_cast<const ToCefAdapterRequest*>(
               &_ToCefAdapterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ToCefAdapterRequest* other);
  friend void swap(ToCefAdapterRequest& a, ToCefAdapterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ToCefAdapterRequest* New() const final {
    return CreateMaybeMessage<ToCefAdapterRequest>(NULL);
  }

  ToCefAdapterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ToCefAdapterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ToCefAdapterRequest& from);
  void MergeFrom(const ToCefAdapterRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToCefAdapterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CefAdapter.CreateBrowserWindowRequest create_browser_window = 2;
  bool has_create_browser_window() const;
  void clear_create_browser_window();
  static const int kCreateBrowserWindowFieldNumber = 2;
  private:
  const ::CefAdapter::CreateBrowserWindowRequest& _internal_create_browser_window() const;
  public:
  const ::CefAdapter::CreateBrowserWindowRequest& create_browser_window() const;
  ::CefAdapter::CreateBrowserWindowRequest* release_create_browser_window();
  ::CefAdapter::CreateBrowserWindowRequest* mutable_create_browser_window();
  void set_allocated_create_browser_window(::CefAdapter::CreateBrowserWindowRequest* create_browser_window);

  // .CefAdapter.SetBrowserWindowTitleRequest set_browser_window_title = 3;
  bool has_set_browser_window_title() const;
  void clear_set_browser_window_title();
  static const int kSetBrowserWindowTitleFieldNumber = 3;
  private:
  const ::CefAdapter::SetBrowserWindowTitleRequest& _internal_set_browser_window_title() const;
  public:
  const ::CefAdapter::SetBrowserWindowTitleRequest& set_browser_window_title() const;
  ::CefAdapter::SetBrowserWindowTitleRequest* release_set_browser_window_title();
  ::CefAdapter::SetBrowserWindowTitleRequest* mutable_set_browser_window_title();
  void set_allocated_set_browser_window_title(::CefAdapter::SetBrowserWindowTitleRequest* set_browser_window_title);

  // .CefAdapter.SetBrowserWindowSizeRequest set_browser_window_size = 4;
  bool has_set_browser_window_size() const;
  void clear_set_browser_window_size();
  static const int kSetBrowserWindowSizeFieldNumber = 4;
  private:
  const ::CefAdapter::SetBrowserWindowSizeRequest& _internal_set_browser_window_size() const;
  public:
  const ::CefAdapter::SetBrowserWindowSizeRequest& set_browser_window_size() const;
  ::CefAdapter::SetBrowserWindowSizeRequest* release_set_browser_window_size();
  ::CefAdapter::SetBrowserWindowSizeRequest* mutable_set_browser_window_size();
  void set_allocated_set_browser_window_size(::CefAdapter::SetBrowserWindowSizeRequest* set_browser_window_size);

  // .CefAdapter.ShowDeveloperToolsRequest show_developer_tools = 5;
  bool has_show_developer_tools() const;
  void clear_show_developer_tools();
  static const int kShowDeveloperToolsFieldNumber = 5;
  private:
  const ::CefAdapter::ShowDeveloperToolsRequest& _internal_show_developer_tools() const;
  public:
  const ::CefAdapter::ShowDeveloperToolsRequest& show_developer_tools() const;
  ::CefAdapter::ShowDeveloperToolsRequest* release_show_developer_tools();
  ::CefAdapter::ShowDeveloperToolsRequest* mutable_show_developer_tools();
  void set_allocated_show_developer_tools(::CefAdapter::ShowDeveloperToolsRequest* show_developer_tools);

  // .CefAdapter.ExecuteJavaScriptRequest execute_javascript = 6;
  bool has_execute_javascript() const;
  void clear_execute_javascript();
  static const int kExecuteJavascriptFieldNumber = 6;
  private:
  const ::CefAdapter::ExecuteJavaScriptRequest& _internal_execute_javascript() const;
  public:
  const ::CefAdapter::ExecuteJavaScriptRequest& execute_javascript() const;
  ::CefAdapter::ExecuteJavaScriptRequest* release_execute_javascript();
  ::CefAdapter::ExecuteJavaScriptRequest* mutable_execute_javascript();
  void set_allocated_execute_javascript(::CefAdapter::ExecuteJavaScriptRequest* execute_javascript);

  // .CefAdapter.QuerySuccessRequest query_success = 7;
  bool has_query_success() const;
  void clear_query_success();
  static const int kQuerySuccessFieldNumber = 7;
  private:
  const ::CefAdapter::QuerySuccessRequest& _internal_query_success() const;
  public:
  const ::CefAdapter::QuerySuccessRequest& query_success() const;
  ::CefAdapter::QuerySuccessRequest* release_query_success();
  ::CefAdapter::QuerySuccessRequest* mutable_query_success();
  void set_allocated_query_success(::CefAdapter::QuerySuccessRequest* query_success);

  // .CefAdapter.QueryFailureRequest query_failure = 8;
  bool has_query_failure() const;
  void clear_query_failure();
  static const int kQueryFailureFieldNumber = 8;
  private:
  const ::CefAdapter::QueryFailureRequest& _internal_query_failure() const;
  public:
  const ::CefAdapter::QueryFailureRequest& query_failure() const;
  ::CefAdapter::QueryFailureRequest* release_query_failure();
  ::CefAdapter::QueryFailureRequest* mutable_query_failure();
  void set_allocated_query_failure(::CefAdapter::QueryFailureRequest* query_failure);

  // .CefAdapter.ToCefAdapterRequestType request_type = 1;
  void clear_request_type();
  static const int kRequestTypeFieldNumber = 1;
  ::CefAdapter::ToCefAdapterRequestType request_type() const;
  void set_request_type(::CefAdapter::ToCefAdapterRequestType value);

  // @@protoc_insertion_point(class_scope:CefAdapter.ToCefAdapterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CefAdapter::CreateBrowserWindowRequest* create_browser_window_;
  ::CefAdapter::SetBrowserWindowTitleRequest* set_browser_window_title_;
  ::CefAdapter::SetBrowserWindowSizeRequest* set_browser_window_size_;
  ::CefAdapter::ShowDeveloperToolsRequest* show_developer_tools_;
  ::CefAdapter::ExecuteJavaScriptRequest* execute_javascript_;
  ::CefAdapter::QuerySuccessRequest* query_success_;
  ::CefAdapter::QueryFailureRequest* query_failure_;
  int request_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnBrowserCreatedRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.OnBrowserCreatedRequest) */ {
 public:
  OnBrowserCreatedRequest();
  virtual ~OnBrowserCreatedRequest();

  OnBrowserCreatedRequest(const OnBrowserCreatedRequest& from);

  inline OnBrowserCreatedRequest& operator=(const OnBrowserCreatedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnBrowserCreatedRequest(OnBrowserCreatedRequest&& from) noexcept
    : OnBrowserCreatedRequest() {
    *this = ::std::move(from);
  }

  inline OnBrowserCreatedRequest& operator=(OnBrowserCreatedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnBrowserCreatedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnBrowserCreatedRequest* internal_default_instance() {
    return reinterpret_cast<const OnBrowserCreatedRequest*>(
               &_OnBrowserCreatedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(OnBrowserCreatedRequest* other);
  friend void swap(OnBrowserCreatedRequest& a, OnBrowserCreatedRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnBrowserCreatedRequest* New() const final {
    return CreateMaybeMessage<OnBrowserCreatedRequest>(NULL);
  }

  OnBrowserCreatedRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnBrowserCreatedRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnBrowserCreatedRequest& from);
  void MergeFrom(const OnBrowserCreatedRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnBrowserCreatedRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 browser_id = 1;
  void clear_browser_id();
  static const int kBrowserIdFieldNumber = 1;
  ::google::protobuf::int32 browser_id() const;
  void set_browser_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CefAdapter.OnBrowserCreatedRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 browser_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnBrowserClosedRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.OnBrowserClosedRequest) */ {
 public:
  OnBrowserClosedRequest();
  virtual ~OnBrowserClosedRequest();

  OnBrowserClosedRequest(const OnBrowserClosedRequest& from);

  inline OnBrowserClosedRequest& operator=(const OnBrowserClosedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnBrowserClosedRequest(OnBrowserClosedRequest&& from) noexcept
    : OnBrowserClosedRequest() {
    *this = ::std::move(from);
  }

  inline OnBrowserClosedRequest& operator=(OnBrowserClosedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnBrowserClosedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnBrowserClosedRequest* internal_default_instance() {
    return reinterpret_cast<const OnBrowserClosedRequest*>(
               &_OnBrowserClosedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(OnBrowserClosedRequest* other);
  friend void swap(OnBrowserClosedRequest& a, OnBrowserClosedRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnBrowserClosedRequest* New() const final {
    return CreateMaybeMessage<OnBrowserClosedRequest>(NULL);
  }

  OnBrowserClosedRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnBrowserClosedRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnBrowserClosedRequest& from);
  void MergeFrom(const OnBrowserClosedRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnBrowserClosedRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 browser_id = 1;
  void clear_browser_id();
  static const int kBrowserIdFieldNumber = 1;
  ::google::protobuf::int32 browser_id() const;
  void set_browser_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CefAdapter.OnBrowserClosedRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 browser_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnContextCreatedRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.OnContextCreatedRequest) */ {
 public:
  OnContextCreatedRequest();
  virtual ~OnContextCreatedRequest();

  OnContextCreatedRequest(const OnContextCreatedRequest& from);

  inline OnContextCreatedRequest& operator=(const OnContextCreatedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnContextCreatedRequest(OnContextCreatedRequest&& from) noexcept
    : OnContextCreatedRequest() {
    *this = ::std::move(from);
  }

  inline OnContextCreatedRequest& operator=(OnContextCreatedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnContextCreatedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnContextCreatedRequest* internal_default_instance() {
    return reinterpret_cast<const OnContextCreatedRequest*>(
               &_OnContextCreatedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(OnContextCreatedRequest* other);
  friend void swap(OnContextCreatedRequest& a, OnContextCreatedRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnContextCreatedRequest* New() const final {
    return CreateMaybeMessage<OnContextCreatedRequest>(NULL);
  }

  OnContextCreatedRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnContextCreatedRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnContextCreatedRequest& from);
  void MergeFrom(const OnContextCreatedRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnContextCreatedRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 frame_id = 2;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  ::google::protobuf::int64 frame_id() const;
  void set_frame_id(::google::protobuf::int64 value);

  // int32 browser_id = 1;
  void clear_browser_id();
  static const int kBrowserIdFieldNumber = 1;
  ::google::protobuf::int32 browser_id() const;
  void set_browser_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CefAdapter.OnContextCreatedRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 frame_id_;
  ::google::protobuf::int32 browser_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnQueryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.OnQueryRequest) */ {
 public:
  OnQueryRequest();
  virtual ~OnQueryRequest();

  OnQueryRequest(const OnQueryRequest& from);

  inline OnQueryRequest& operator=(const OnQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnQueryRequest(OnQueryRequest&& from) noexcept
    : OnQueryRequest() {
    *this = ::std::move(from);
  }

  inline OnQueryRequest& operator=(OnQueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnQueryRequest* internal_default_instance() {
    return reinterpret_cast<const OnQueryRequest*>(
               &_OnQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(OnQueryRequest* other);
  friend void swap(OnQueryRequest& a, OnQueryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnQueryRequest* New() const final {
    return CreateMaybeMessage<OnQueryRequest>(NULL);
  }

  OnQueryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnQueryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnQueryRequest& from);
  void MergeFrom(const OnQueryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnQueryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 4;
  void clear_query();
  static const int kQueryFieldNumber = 4;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // int64 frame_id = 2;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  ::google::protobuf::int64 frame_id() const;
  void set_frame_id(::google::protobuf::int64 value);

  // int64 query_id = 3;
  void clear_query_id();
  static const int kQueryIdFieldNumber = 3;
  ::google::protobuf::int64 query_id() const;
  void set_query_id(::google::protobuf::int64 value);

  // int32 browser_id = 1;
  void clear_browser_id();
  static const int kBrowserIdFieldNumber = 1;
  ::google::protobuf::int32 browser_id() const;
  void set_browser_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CefAdapter.OnQueryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::int64 frame_id_;
  ::google::protobuf::int64 query_id_;
  ::google::protobuf::int32 browser_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FromCefAdapterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.FromCefAdapterRequest) */ {
 public:
  FromCefAdapterRequest();
  virtual ~FromCefAdapterRequest();

  FromCefAdapterRequest(const FromCefAdapterRequest& from);

  inline FromCefAdapterRequest& operator=(const FromCefAdapterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FromCefAdapterRequest(FromCefAdapterRequest&& from) noexcept
    : FromCefAdapterRequest() {
    *this = ::std::move(from);
  }

  inline FromCefAdapterRequest& operator=(FromCefAdapterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FromCefAdapterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FromCefAdapterRequest* internal_default_instance() {
    return reinterpret_cast<const FromCefAdapterRequest*>(
               &_FromCefAdapterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(FromCefAdapterRequest* other);
  friend void swap(FromCefAdapterRequest& a, FromCefAdapterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FromCefAdapterRequest* New() const final {
    return CreateMaybeMessage<FromCefAdapterRequest>(NULL);
  }

  FromCefAdapterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FromCefAdapterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FromCefAdapterRequest& from);
  void MergeFrom(const FromCefAdapterRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FromCefAdapterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CefAdapter.OnBrowserCreatedRequest on_browser_created = 2;
  bool has_on_browser_created() const;
  void clear_on_browser_created();
  static const int kOnBrowserCreatedFieldNumber = 2;
  private:
  const ::CefAdapter::OnBrowserCreatedRequest& _internal_on_browser_created() const;
  public:
  const ::CefAdapter::OnBrowserCreatedRequest& on_browser_created() const;
  ::CefAdapter::OnBrowserCreatedRequest* release_on_browser_created();
  ::CefAdapter::OnBrowserCreatedRequest* mutable_on_browser_created();
  void set_allocated_on_browser_created(::CefAdapter::OnBrowserCreatedRequest* on_browser_created);

  // .CefAdapter.OnBrowserClosedRequest on_browser_closed = 3;
  bool has_on_browser_closed() const;
  void clear_on_browser_closed();
  static const int kOnBrowserClosedFieldNumber = 3;
  private:
  const ::CefAdapter::OnBrowserClosedRequest& _internal_on_browser_closed() const;
  public:
  const ::CefAdapter::OnBrowserClosedRequest& on_browser_closed() const;
  ::CefAdapter::OnBrowserClosedRequest* release_on_browser_closed();
  ::CefAdapter::OnBrowserClosedRequest* mutable_on_browser_closed();
  void set_allocated_on_browser_closed(::CefAdapter::OnBrowserClosedRequest* on_browser_closed);

  // .CefAdapter.OnContextCreatedRequest on_context_created = 4;
  bool has_on_context_created() const;
  void clear_on_context_created();
  static const int kOnContextCreatedFieldNumber = 4;
  private:
  const ::CefAdapter::OnContextCreatedRequest& _internal_on_context_created() const;
  public:
  const ::CefAdapter::OnContextCreatedRequest& on_context_created() const;
  ::CefAdapter::OnContextCreatedRequest* release_on_context_created();
  ::CefAdapter::OnContextCreatedRequest* mutable_on_context_created();
  void set_allocated_on_context_created(::CefAdapter::OnContextCreatedRequest* on_context_created);

  // .CefAdapter.OnQueryRequest on_query = 5;
  bool has_on_query() const;
  void clear_on_query();
  static const int kOnQueryFieldNumber = 5;
  private:
  const ::CefAdapter::OnQueryRequest& _internal_on_query() const;
  public:
  const ::CefAdapter::OnQueryRequest& on_query() const;
  ::CefAdapter::OnQueryRequest* release_on_query();
  ::CefAdapter::OnQueryRequest* mutable_on_query();
  void set_allocated_on_query(::CefAdapter::OnQueryRequest* on_query);

  // .CefAdapter.FromCefAdapterRequestType request_type = 1;
  void clear_request_type();
  static const int kRequestTypeFieldNumber = 1;
  ::CefAdapter::FromCefAdapterRequestType request_type() const;
  void set_request_type(::CefAdapter::FromCefAdapterRequestType value);

  // @@protoc_insertion_point(class_scope:CefAdapter.FromCefAdapterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CefAdapter::OnBrowserCreatedRequest* on_browser_created_;
  ::CefAdapter::OnBrowserClosedRequest* on_browser_closed_;
  ::CefAdapter::OnContextCreatedRequest* on_context_created_;
  ::CefAdapter::OnQueryRequest* on_query_;
  int request_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CefAdapterException : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.CefAdapterException) */ {
 public:
  CefAdapterException();
  virtual ~CefAdapterException();

  CefAdapterException(const CefAdapterException& from);

  inline CefAdapterException& operator=(const CefAdapterException& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CefAdapterException(CefAdapterException&& from) noexcept
    : CefAdapterException() {
    *this = ::std::move(from);
  }

  inline CefAdapterException& operator=(CefAdapterException&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CefAdapterException& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CefAdapterException* internal_default_instance() {
    return reinterpret_cast<const CefAdapterException*>(
               &_CefAdapterException_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CefAdapterException* other);
  friend void swap(CefAdapterException& a, CefAdapterException& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CefAdapterException* New() const final {
    return CreateMaybeMessage<CefAdapterException>(NULL);
  }

  CefAdapterException* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CefAdapterException>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CefAdapterException& from);
  void MergeFrom(const CefAdapterException& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CefAdapterException* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // int32 error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CefAdapter.CefAdapterException)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::int32 error_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CefAdapterReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CefAdapter.CefAdapterReply) */ {
 public:
  CefAdapterReply();
  virtual ~CefAdapterReply();

  CefAdapterReply(const CefAdapterReply& from);

  inline CefAdapterReply& operator=(const CefAdapterReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CefAdapterReply(CefAdapterReply&& from) noexcept
    : CefAdapterReply() {
    *this = ::std::move(from);
  }

  inline CefAdapterReply& operator=(CefAdapterReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CefAdapterReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CefAdapterReply* internal_default_instance() {
    return reinterpret_cast<const CefAdapterReply*>(
               &_CefAdapterReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CefAdapterReply* other);
  friend void swap(CefAdapterReply& a, CefAdapterReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CefAdapterReply* New() const final {
    return CreateMaybeMessage<CefAdapterReply>(NULL);
  }

  CefAdapterReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CefAdapterReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CefAdapterReply& from);
  void MergeFrom(const CefAdapterReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CefAdapterReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.BoolValue boolean_value = 2;
  bool has_boolean_value() const;
  void clear_boolean_value();
  static const int kBooleanValueFieldNumber = 2;
  private:
  const ::google::protobuf::BoolValue& _internal_boolean_value() const;
  public:
  const ::google::protobuf::BoolValue& boolean_value() const;
  ::google::protobuf::BoolValue* release_boolean_value();
  ::google::protobuf::BoolValue* mutable_boolean_value();
  void set_allocated_boolean_value(::google::protobuf::BoolValue* boolean_value);

  // .google.protobuf.Int32Value integer_value = 3;
  bool has_integer_value() const;
  void clear_integer_value();
  static const int kIntegerValueFieldNumber = 3;
  private:
  const ::google::protobuf::Int32Value& _internal_integer_value() const;
  public:
  const ::google::protobuf::Int32Value& integer_value() const;
  ::google::protobuf::Int32Value* release_integer_value();
  ::google::protobuf::Int32Value* mutable_integer_value();
  void set_allocated_integer_value(::google::protobuf::Int32Value* integer_value);

  // .google.protobuf.DoubleValue double_value = 4;
  bool has_double_value() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 4;
  private:
  const ::google::protobuf::DoubleValue& _internal_double_value() const;
  public:
  const ::google::protobuf::DoubleValue& double_value() const;
  ::google::protobuf::DoubleValue* release_double_value();
  ::google::protobuf::DoubleValue* mutable_double_value();
  void set_allocated_double_value(::google::protobuf::DoubleValue* double_value);

  // .google.protobuf.StringValue string_value = 5;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 5;
  private:
  const ::google::protobuf::StringValue& _internal_string_value() const;
  public:
  const ::google::protobuf::StringValue& string_value() const;
  ::google::protobuf::StringValue* release_string_value();
  ::google::protobuf::StringValue* mutable_string_value();
  void set_allocated_string_value(::google::protobuf::StringValue* string_value);

  // .CefAdapter.CefAdapterException exception = 6;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 6;
  private:
  const ::CefAdapter::CefAdapterException& _internal_exception() const;
  public:
  const ::CefAdapter::CefAdapterException& exception() const;
  ::CefAdapter::CefAdapterException* release_exception();
  ::CefAdapter::CefAdapterException* mutable_exception();
  void set_allocated_exception(::CefAdapter::CefAdapterException* exception);

  // .CefAdapter.ReplyType reply_type = 1;
  void clear_reply_type();
  static const int kReplyTypeFieldNumber = 1;
  ::CefAdapter::ReplyType reply_type() const;
  void set_reply_type(::CefAdapter::ReplyType value);

  // @@protoc_insertion_point(class_scope:CefAdapter.CefAdapterReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::BoolValue* boolean_value_;
  ::google::protobuf::Int32Value* integer_value_;
  ::google::protobuf::DoubleValue* double_value_;
  ::google::protobuf::StringValue* string_value_;
  ::CefAdapter::CefAdapterException* exception_;
  int reply_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IpcMessages_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateBrowserWindowRequest

// string url = 1;
inline void CreateBrowserWindowRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateBrowserWindowRequest::url() const {
  // @@protoc_insertion_point(field_get:CefAdapter.CreateBrowserWindowRequest.url)
  return url_.GetNoArena();
}
inline void CreateBrowserWindowRequest::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CefAdapter.CreateBrowserWindowRequest.url)
}
#if LANG_CXX11
inline void CreateBrowserWindowRequest::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CefAdapter.CreateBrowserWindowRequest.url)
}
#endif
inline void CreateBrowserWindowRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CefAdapter.CreateBrowserWindowRequest.url)
}
inline void CreateBrowserWindowRequest::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CefAdapter.CreateBrowserWindowRequest.url)
}
inline ::std::string* CreateBrowserWindowRequest::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:CefAdapter.CreateBrowserWindowRequest.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateBrowserWindowRequest::release_url() {
  // @@protoc_insertion_point(field_release:CefAdapter.CreateBrowserWindowRequest.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateBrowserWindowRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.CreateBrowserWindowRequest.url)
}

// string title = 2;
inline void CreateBrowserWindowRequest::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateBrowserWindowRequest::title() const {
  // @@protoc_insertion_point(field_get:CefAdapter.CreateBrowserWindowRequest.title)
  return title_.GetNoArena();
}
inline void CreateBrowserWindowRequest::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CefAdapter.CreateBrowserWindowRequest.title)
}
#if LANG_CXX11
inline void CreateBrowserWindowRequest::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CefAdapter.CreateBrowserWindowRequest.title)
}
#endif
inline void CreateBrowserWindowRequest::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CefAdapter.CreateBrowserWindowRequest.title)
}
inline void CreateBrowserWindowRequest::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CefAdapter.CreateBrowserWindowRequest.title)
}
inline ::std::string* CreateBrowserWindowRequest::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:CefAdapter.CreateBrowserWindowRequest.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateBrowserWindowRequest::release_title() {
  // @@protoc_insertion_point(field_release:CefAdapter.CreateBrowserWindowRequest.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateBrowserWindowRequest::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.CreateBrowserWindowRequest.title)
}

// int32 width = 3;
inline void CreateBrowserWindowRequest::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 CreateBrowserWindowRequest::width() const {
  // @@protoc_insertion_point(field_get:CefAdapter.CreateBrowserWindowRequest.width)
  return width_;
}
inline void CreateBrowserWindowRequest::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.CreateBrowserWindowRequest.width)
}

// int32 height = 4;
inline void CreateBrowserWindowRequest::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 CreateBrowserWindowRequest::height() const {
  // @@protoc_insertion_point(field_get:CefAdapter.CreateBrowserWindowRequest.height)
  return height_;
}
inline void CreateBrowserWindowRequest::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.CreateBrowserWindowRequest.height)
}

// -------------------------------------------------------------------

// SetBrowserWindowTitleRequest

// int32 browser_id = 1;
inline void SetBrowserWindowTitleRequest::clear_browser_id() {
  browser_id_ = 0;
}
inline ::google::protobuf::int32 SetBrowserWindowTitleRequest::browser_id() const {
  // @@protoc_insertion_point(field_get:CefAdapter.SetBrowserWindowTitleRequest.browser_id)
  return browser_id_;
}
inline void SetBrowserWindowTitleRequest::set_browser_id(::google::protobuf::int32 value) {
  
  browser_id_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.SetBrowserWindowTitleRequest.browser_id)
}

// string title = 2;
inline void SetBrowserWindowTitleRequest::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetBrowserWindowTitleRequest::title() const {
  // @@protoc_insertion_point(field_get:CefAdapter.SetBrowserWindowTitleRequest.title)
  return title_.GetNoArena();
}
inline void SetBrowserWindowTitleRequest::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CefAdapter.SetBrowserWindowTitleRequest.title)
}
#if LANG_CXX11
inline void SetBrowserWindowTitleRequest::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CefAdapter.SetBrowserWindowTitleRequest.title)
}
#endif
inline void SetBrowserWindowTitleRequest::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CefAdapter.SetBrowserWindowTitleRequest.title)
}
inline void SetBrowserWindowTitleRequest::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CefAdapter.SetBrowserWindowTitleRequest.title)
}
inline ::std::string* SetBrowserWindowTitleRequest::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:CefAdapter.SetBrowserWindowTitleRequest.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetBrowserWindowTitleRequest::release_title() {
  // @@protoc_insertion_point(field_release:CefAdapter.SetBrowserWindowTitleRequest.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetBrowserWindowTitleRequest::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.SetBrowserWindowTitleRequest.title)
}

// -------------------------------------------------------------------

// SetBrowserWindowSizeRequest

// int32 browser_id = 1;
inline void SetBrowserWindowSizeRequest::clear_browser_id() {
  browser_id_ = 0;
}
inline ::google::protobuf::int32 SetBrowserWindowSizeRequest::browser_id() const {
  // @@protoc_insertion_point(field_get:CefAdapter.SetBrowserWindowSizeRequest.browser_id)
  return browser_id_;
}
inline void SetBrowserWindowSizeRequest::set_browser_id(::google::protobuf::int32 value) {
  
  browser_id_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.SetBrowserWindowSizeRequest.browser_id)
}

// int32 width = 3;
inline void SetBrowserWindowSizeRequest::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 SetBrowserWindowSizeRequest::width() const {
  // @@protoc_insertion_point(field_get:CefAdapter.SetBrowserWindowSizeRequest.width)
  return width_;
}
inline void SetBrowserWindowSizeRequest::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.SetBrowserWindowSizeRequest.width)
}

// int32 height = 4;
inline void SetBrowserWindowSizeRequest::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 SetBrowserWindowSizeRequest::height() const {
  // @@protoc_insertion_point(field_get:CefAdapter.SetBrowserWindowSizeRequest.height)
  return height_;
}
inline void SetBrowserWindowSizeRequest::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.SetBrowserWindowSizeRequest.height)
}

// -------------------------------------------------------------------

// ShowDeveloperToolsRequest

// int32 browser_id = 1;
inline void ShowDeveloperToolsRequest::clear_browser_id() {
  browser_id_ = 0;
}
inline ::google::protobuf::int32 ShowDeveloperToolsRequest::browser_id() const {
  // @@protoc_insertion_point(field_get:CefAdapter.ShowDeveloperToolsRequest.browser_id)
  return browser_id_;
}
inline void ShowDeveloperToolsRequest::set_browser_id(::google::protobuf::int32 value) {
  
  browser_id_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.ShowDeveloperToolsRequest.browser_id)
}

// int32 width = 2;
inline void ShowDeveloperToolsRequest::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 ShowDeveloperToolsRequest::width() const {
  // @@protoc_insertion_point(field_get:CefAdapter.ShowDeveloperToolsRequest.width)
  return width_;
}
inline void ShowDeveloperToolsRequest::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.ShowDeveloperToolsRequest.width)
}

// int32 height = 3;
inline void ShowDeveloperToolsRequest::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 ShowDeveloperToolsRequest::height() const {
  // @@protoc_insertion_point(field_get:CefAdapter.ShowDeveloperToolsRequest.height)
  return height_;
}
inline void ShowDeveloperToolsRequest::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.ShowDeveloperToolsRequest.height)
}

// -------------------------------------------------------------------

// ExecuteJavaScriptRequest

// int32 browser_id = 1;
inline void ExecuteJavaScriptRequest::clear_browser_id() {
  browser_id_ = 0;
}
inline ::google::protobuf::int32 ExecuteJavaScriptRequest::browser_id() const {
  // @@protoc_insertion_point(field_get:CefAdapter.ExecuteJavaScriptRequest.browser_id)
  return browser_id_;
}
inline void ExecuteJavaScriptRequest::set_browser_id(::google::protobuf::int32 value) {
  
  browser_id_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.ExecuteJavaScriptRequest.browser_id)
}

// string code = 2;
inline void ExecuteJavaScriptRequest::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecuteJavaScriptRequest::code() const {
  // @@protoc_insertion_point(field_get:CefAdapter.ExecuteJavaScriptRequest.code)
  return code_.GetNoArena();
}
inline void ExecuteJavaScriptRequest::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CefAdapter.ExecuteJavaScriptRequest.code)
}
#if LANG_CXX11
inline void ExecuteJavaScriptRequest::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CefAdapter.ExecuteJavaScriptRequest.code)
}
#endif
inline void ExecuteJavaScriptRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CefAdapter.ExecuteJavaScriptRequest.code)
}
inline void ExecuteJavaScriptRequest::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CefAdapter.ExecuteJavaScriptRequest.code)
}
inline ::std::string* ExecuteJavaScriptRequest::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:CefAdapter.ExecuteJavaScriptRequest.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecuteJavaScriptRequest::release_code() {
  // @@protoc_insertion_point(field_release:CefAdapter.ExecuteJavaScriptRequest.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteJavaScriptRequest::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.ExecuteJavaScriptRequest.code)
}

// -------------------------------------------------------------------

// QuerySuccessRequest

// int64 query_id = 1;
inline void QuerySuccessRequest::clear_query_id() {
  query_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QuerySuccessRequest::query_id() const {
  // @@protoc_insertion_point(field_get:CefAdapter.QuerySuccessRequest.query_id)
  return query_id_;
}
inline void QuerySuccessRequest::set_query_id(::google::protobuf::int64 value) {
  
  query_id_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.QuerySuccessRequest.query_id)
}

// string json_object = 2;
inline void QuerySuccessRequest::clear_json_object() {
  json_object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuerySuccessRequest::json_object() const {
  // @@protoc_insertion_point(field_get:CefAdapter.QuerySuccessRequest.json_object)
  return json_object_.GetNoArena();
}
inline void QuerySuccessRequest::set_json_object(const ::std::string& value) {
  
  json_object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CefAdapter.QuerySuccessRequest.json_object)
}
#if LANG_CXX11
inline void QuerySuccessRequest::set_json_object(::std::string&& value) {
  
  json_object_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CefAdapter.QuerySuccessRequest.json_object)
}
#endif
inline void QuerySuccessRequest::set_json_object(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  json_object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CefAdapter.QuerySuccessRequest.json_object)
}
inline void QuerySuccessRequest::set_json_object(const char* value, size_t size) {
  
  json_object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CefAdapter.QuerySuccessRequest.json_object)
}
inline ::std::string* QuerySuccessRequest::mutable_json_object() {
  
  // @@protoc_insertion_point(field_mutable:CefAdapter.QuerySuccessRequest.json_object)
  return json_object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuerySuccessRequest::release_json_object() {
  // @@protoc_insertion_point(field_release:CefAdapter.QuerySuccessRequest.json_object)
  
  return json_object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuerySuccessRequest::set_allocated_json_object(::std::string* json_object) {
  if (json_object != NULL) {
    
  } else {
    
  }
  json_object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_object);
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.QuerySuccessRequest.json_object)
}

// -------------------------------------------------------------------

// QueryFailureRequest

// int64 query_id = 1;
inline void QueryFailureRequest::clear_query_id() {
  query_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryFailureRequest::query_id() const {
  // @@protoc_insertion_point(field_get:CefAdapter.QueryFailureRequest.query_id)
  return query_id_;
}
inline void QueryFailureRequest::set_query_id(::google::protobuf::int64 value) {
  
  query_id_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.QueryFailureRequest.query_id)
}

// int32 error_code = 2;
inline void QueryFailureRequest::clear_error_code() {
  error_code_ = 0;
}
inline ::google::protobuf::int32 QueryFailureRequest::error_code() const {
  // @@protoc_insertion_point(field_get:CefAdapter.QueryFailureRequest.error_code)
  return error_code_;
}
inline void QueryFailureRequest::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.QueryFailureRequest.error_code)
}

// string error_message = 3;
inline void QueryFailureRequest::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryFailureRequest::error_message() const {
  // @@protoc_insertion_point(field_get:CefAdapter.QueryFailureRequest.error_message)
  return error_message_.GetNoArena();
}
inline void QueryFailureRequest::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CefAdapter.QueryFailureRequest.error_message)
}
#if LANG_CXX11
inline void QueryFailureRequest::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CefAdapter.QueryFailureRequest.error_message)
}
#endif
inline void QueryFailureRequest::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CefAdapter.QueryFailureRequest.error_message)
}
inline void QueryFailureRequest::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CefAdapter.QueryFailureRequest.error_message)
}
inline ::std::string* QueryFailureRequest::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:CefAdapter.QueryFailureRequest.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryFailureRequest::release_error_message() {
  // @@protoc_insertion_point(field_release:CefAdapter.QueryFailureRequest.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryFailureRequest::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.QueryFailureRequest.error_message)
}

// -------------------------------------------------------------------

// ToCefAdapterRequest

// .CefAdapter.ToCefAdapterRequestType request_type = 1;
inline void ToCefAdapterRequest::clear_request_type() {
  request_type_ = 0;
}
inline ::CefAdapter::ToCefAdapterRequestType ToCefAdapterRequest::request_type() const {
  // @@protoc_insertion_point(field_get:CefAdapter.ToCefAdapterRequest.request_type)
  return static_cast< ::CefAdapter::ToCefAdapterRequestType >(request_type_);
}
inline void ToCefAdapterRequest::set_request_type(::CefAdapter::ToCefAdapterRequestType value) {
  
  request_type_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.ToCefAdapterRequest.request_type)
}

// .CefAdapter.CreateBrowserWindowRequest create_browser_window = 2;
inline bool ToCefAdapterRequest::has_create_browser_window() const {
  return this != internal_default_instance() && create_browser_window_ != NULL;
}
inline void ToCefAdapterRequest::clear_create_browser_window() {
  if (GetArenaNoVirtual() == NULL && create_browser_window_ != NULL) {
    delete create_browser_window_;
  }
  create_browser_window_ = NULL;
}
inline const ::CefAdapter::CreateBrowserWindowRequest& ToCefAdapterRequest::_internal_create_browser_window() const {
  return *create_browser_window_;
}
inline const ::CefAdapter::CreateBrowserWindowRequest& ToCefAdapterRequest::create_browser_window() const {
  const ::CefAdapter::CreateBrowserWindowRequest* p = create_browser_window_;
  // @@protoc_insertion_point(field_get:CefAdapter.ToCefAdapterRequest.create_browser_window)
  return p != NULL ? *p : *reinterpret_cast<const ::CefAdapter::CreateBrowserWindowRequest*>(
      &::CefAdapter::_CreateBrowserWindowRequest_default_instance_);
}
inline ::CefAdapter::CreateBrowserWindowRequest* ToCefAdapterRequest::release_create_browser_window() {
  // @@protoc_insertion_point(field_release:CefAdapter.ToCefAdapterRequest.create_browser_window)
  
  ::CefAdapter::CreateBrowserWindowRequest* temp = create_browser_window_;
  create_browser_window_ = NULL;
  return temp;
}
inline ::CefAdapter::CreateBrowserWindowRequest* ToCefAdapterRequest::mutable_create_browser_window() {
  
  if (create_browser_window_ == NULL) {
    auto* p = CreateMaybeMessage<::CefAdapter::CreateBrowserWindowRequest>(GetArenaNoVirtual());
    create_browser_window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.ToCefAdapterRequest.create_browser_window)
  return create_browser_window_;
}
inline void ToCefAdapterRequest::set_allocated_create_browser_window(::CefAdapter::CreateBrowserWindowRequest* create_browser_window) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete create_browser_window_;
  }
  if (create_browser_window) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      create_browser_window = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_browser_window, submessage_arena);
    }
    
  } else {
    
  }
  create_browser_window_ = create_browser_window;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.ToCefAdapterRequest.create_browser_window)
}

// .CefAdapter.SetBrowserWindowTitleRequest set_browser_window_title = 3;
inline bool ToCefAdapterRequest::has_set_browser_window_title() const {
  return this != internal_default_instance() && set_browser_window_title_ != NULL;
}
inline void ToCefAdapterRequest::clear_set_browser_window_title() {
  if (GetArenaNoVirtual() == NULL && set_browser_window_title_ != NULL) {
    delete set_browser_window_title_;
  }
  set_browser_window_title_ = NULL;
}
inline const ::CefAdapter::SetBrowserWindowTitleRequest& ToCefAdapterRequest::_internal_set_browser_window_title() const {
  return *set_browser_window_title_;
}
inline const ::CefAdapter::SetBrowserWindowTitleRequest& ToCefAdapterRequest::set_browser_window_title() const {
  const ::CefAdapter::SetBrowserWindowTitleRequest* p = set_browser_window_title_;
  // @@protoc_insertion_point(field_get:CefAdapter.ToCefAdapterRequest.set_browser_window_title)
  return p != NULL ? *p : *reinterpret_cast<const ::CefAdapter::SetBrowserWindowTitleRequest*>(
      &::CefAdapter::_SetBrowserWindowTitleRequest_default_instance_);
}
inline ::CefAdapter::SetBrowserWindowTitleRequest* ToCefAdapterRequest::release_set_browser_window_title() {
  // @@protoc_insertion_point(field_release:CefAdapter.ToCefAdapterRequest.set_browser_window_title)
  
  ::CefAdapter::SetBrowserWindowTitleRequest* temp = set_browser_window_title_;
  set_browser_window_title_ = NULL;
  return temp;
}
inline ::CefAdapter::SetBrowserWindowTitleRequest* ToCefAdapterRequest::mutable_set_browser_window_title() {
  
  if (set_browser_window_title_ == NULL) {
    auto* p = CreateMaybeMessage<::CefAdapter::SetBrowserWindowTitleRequest>(GetArenaNoVirtual());
    set_browser_window_title_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.ToCefAdapterRequest.set_browser_window_title)
  return set_browser_window_title_;
}
inline void ToCefAdapterRequest::set_allocated_set_browser_window_title(::CefAdapter::SetBrowserWindowTitleRequest* set_browser_window_title) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete set_browser_window_title_;
  }
  if (set_browser_window_title) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_browser_window_title = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_browser_window_title, submessage_arena);
    }
    
  } else {
    
  }
  set_browser_window_title_ = set_browser_window_title;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.ToCefAdapterRequest.set_browser_window_title)
}

// .CefAdapter.SetBrowserWindowSizeRequest set_browser_window_size = 4;
inline bool ToCefAdapterRequest::has_set_browser_window_size() const {
  return this != internal_default_instance() && set_browser_window_size_ != NULL;
}
inline void ToCefAdapterRequest::clear_set_browser_window_size() {
  if (GetArenaNoVirtual() == NULL && set_browser_window_size_ != NULL) {
    delete set_browser_window_size_;
  }
  set_browser_window_size_ = NULL;
}
inline const ::CefAdapter::SetBrowserWindowSizeRequest& ToCefAdapterRequest::_internal_set_browser_window_size() const {
  return *set_browser_window_size_;
}
inline const ::CefAdapter::SetBrowserWindowSizeRequest& ToCefAdapterRequest::set_browser_window_size() const {
  const ::CefAdapter::SetBrowserWindowSizeRequest* p = set_browser_window_size_;
  // @@protoc_insertion_point(field_get:CefAdapter.ToCefAdapterRequest.set_browser_window_size)
  return p != NULL ? *p : *reinterpret_cast<const ::CefAdapter::SetBrowserWindowSizeRequest*>(
      &::CefAdapter::_SetBrowserWindowSizeRequest_default_instance_);
}
inline ::CefAdapter::SetBrowserWindowSizeRequest* ToCefAdapterRequest::release_set_browser_window_size() {
  // @@protoc_insertion_point(field_release:CefAdapter.ToCefAdapterRequest.set_browser_window_size)
  
  ::CefAdapter::SetBrowserWindowSizeRequest* temp = set_browser_window_size_;
  set_browser_window_size_ = NULL;
  return temp;
}
inline ::CefAdapter::SetBrowserWindowSizeRequest* ToCefAdapterRequest::mutable_set_browser_window_size() {
  
  if (set_browser_window_size_ == NULL) {
    auto* p = CreateMaybeMessage<::CefAdapter::SetBrowserWindowSizeRequest>(GetArenaNoVirtual());
    set_browser_window_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.ToCefAdapterRequest.set_browser_window_size)
  return set_browser_window_size_;
}
inline void ToCefAdapterRequest::set_allocated_set_browser_window_size(::CefAdapter::SetBrowserWindowSizeRequest* set_browser_window_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete set_browser_window_size_;
  }
  if (set_browser_window_size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_browser_window_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_browser_window_size, submessage_arena);
    }
    
  } else {
    
  }
  set_browser_window_size_ = set_browser_window_size;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.ToCefAdapterRequest.set_browser_window_size)
}

// .CefAdapter.ShowDeveloperToolsRequest show_developer_tools = 5;
inline bool ToCefAdapterRequest::has_show_developer_tools() const {
  return this != internal_default_instance() && show_developer_tools_ != NULL;
}
inline void ToCefAdapterRequest::clear_show_developer_tools() {
  if (GetArenaNoVirtual() == NULL && show_developer_tools_ != NULL) {
    delete show_developer_tools_;
  }
  show_developer_tools_ = NULL;
}
inline const ::CefAdapter::ShowDeveloperToolsRequest& ToCefAdapterRequest::_internal_show_developer_tools() const {
  return *show_developer_tools_;
}
inline const ::CefAdapter::ShowDeveloperToolsRequest& ToCefAdapterRequest::show_developer_tools() const {
  const ::CefAdapter::ShowDeveloperToolsRequest* p = show_developer_tools_;
  // @@protoc_insertion_point(field_get:CefAdapter.ToCefAdapterRequest.show_developer_tools)
  return p != NULL ? *p : *reinterpret_cast<const ::CefAdapter::ShowDeveloperToolsRequest*>(
      &::CefAdapter::_ShowDeveloperToolsRequest_default_instance_);
}
inline ::CefAdapter::ShowDeveloperToolsRequest* ToCefAdapterRequest::release_show_developer_tools() {
  // @@protoc_insertion_point(field_release:CefAdapter.ToCefAdapterRequest.show_developer_tools)
  
  ::CefAdapter::ShowDeveloperToolsRequest* temp = show_developer_tools_;
  show_developer_tools_ = NULL;
  return temp;
}
inline ::CefAdapter::ShowDeveloperToolsRequest* ToCefAdapterRequest::mutable_show_developer_tools() {
  
  if (show_developer_tools_ == NULL) {
    auto* p = CreateMaybeMessage<::CefAdapter::ShowDeveloperToolsRequest>(GetArenaNoVirtual());
    show_developer_tools_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.ToCefAdapterRequest.show_developer_tools)
  return show_developer_tools_;
}
inline void ToCefAdapterRequest::set_allocated_show_developer_tools(::CefAdapter::ShowDeveloperToolsRequest* show_developer_tools) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete show_developer_tools_;
  }
  if (show_developer_tools) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      show_developer_tools = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, show_developer_tools, submessage_arena);
    }
    
  } else {
    
  }
  show_developer_tools_ = show_developer_tools;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.ToCefAdapterRequest.show_developer_tools)
}

// .CefAdapter.ExecuteJavaScriptRequest execute_javascript = 6;
inline bool ToCefAdapterRequest::has_execute_javascript() const {
  return this != internal_default_instance() && execute_javascript_ != NULL;
}
inline void ToCefAdapterRequest::clear_execute_javascript() {
  if (GetArenaNoVirtual() == NULL && execute_javascript_ != NULL) {
    delete execute_javascript_;
  }
  execute_javascript_ = NULL;
}
inline const ::CefAdapter::ExecuteJavaScriptRequest& ToCefAdapterRequest::_internal_execute_javascript() const {
  return *execute_javascript_;
}
inline const ::CefAdapter::ExecuteJavaScriptRequest& ToCefAdapterRequest::execute_javascript() const {
  const ::CefAdapter::ExecuteJavaScriptRequest* p = execute_javascript_;
  // @@protoc_insertion_point(field_get:CefAdapter.ToCefAdapterRequest.execute_javascript)
  return p != NULL ? *p : *reinterpret_cast<const ::CefAdapter::ExecuteJavaScriptRequest*>(
      &::CefAdapter::_ExecuteJavaScriptRequest_default_instance_);
}
inline ::CefAdapter::ExecuteJavaScriptRequest* ToCefAdapterRequest::release_execute_javascript() {
  // @@protoc_insertion_point(field_release:CefAdapter.ToCefAdapterRequest.execute_javascript)
  
  ::CefAdapter::ExecuteJavaScriptRequest* temp = execute_javascript_;
  execute_javascript_ = NULL;
  return temp;
}
inline ::CefAdapter::ExecuteJavaScriptRequest* ToCefAdapterRequest::mutable_execute_javascript() {
  
  if (execute_javascript_ == NULL) {
    auto* p = CreateMaybeMessage<::CefAdapter::ExecuteJavaScriptRequest>(GetArenaNoVirtual());
    execute_javascript_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.ToCefAdapterRequest.execute_javascript)
  return execute_javascript_;
}
inline void ToCefAdapterRequest::set_allocated_execute_javascript(::CefAdapter::ExecuteJavaScriptRequest* execute_javascript) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete execute_javascript_;
  }
  if (execute_javascript) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      execute_javascript = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execute_javascript, submessage_arena);
    }
    
  } else {
    
  }
  execute_javascript_ = execute_javascript;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.ToCefAdapterRequest.execute_javascript)
}

// .CefAdapter.QuerySuccessRequest query_success = 7;
inline bool ToCefAdapterRequest::has_query_success() const {
  return this != internal_default_instance() && query_success_ != NULL;
}
inline void ToCefAdapterRequest::clear_query_success() {
  if (GetArenaNoVirtual() == NULL && query_success_ != NULL) {
    delete query_success_;
  }
  query_success_ = NULL;
}
inline const ::CefAdapter::QuerySuccessRequest& ToCefAdapterRequest::_internal_query_success() const {
  return *query_success_;
}
inline const ::CefAdapter::QuerySuccessRequest& ToCefAdapterRequest::query_success() const {
  const ::CefAdapter::QuerySuccessRequest* p = query_success_;
  // @@protoc_insertion_point(field_get:CefAdapter.ToCefAdapterRequest.query_success)
  return p != NULL ? *p : *reinterpret_cast<const ::CefAdapter::QuerySuccessRequest*>(
      &::CefAdapter::_QuerySuccessRequest_default_instance_);
}
inline ::CefAdapter::QuerySuccessRequest* ToCefAdapterRequest::release_query_success() {
  // @@protoc_insertion_point(field_release:CefAdapter.ToCefAdapterRequest.query_success)
  
  ::CefAdapter::QuerySuccessRequest* temp = query_success_;
  query_success_ = NULL;
  return temp;
}
inline ::CefAdapter::QuerySuccessRequest* ToCefAdapterRequest::mutable_query_success() {
  
  if (query_success_ == NULL) {
    auto* p = CreateMaybeMessage<::CefAdapter::QuerySuccessRequest>(GetArenaNoVirtual());
    query_success_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.ToCefAdapterRequest.query_success)
  return query_success_;
}
inline void ToCefAdapterRequest::set_allocated_query_success(::CefAdapter::QuerySuccessRequest* query_success) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_success_;
  }
  if (query_success) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query_success = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query_success, submessage_arena);
    }
    
  } else {
    
  }
  query_success_ = query_success;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.ToCefAdapterRequest.query_success)
}

// .CefAdapter.QueryFailureRequest query_failure = 8;
inline bool ToCefAdapterRequest::has_query_failure() const {
  return this != internal_default_instance() && query_failure_ != NULL;
}
inline void ToCefAdapterRequest::clear_query_failure() {
  if (GetArenaNoVirtual() == NULL && query_failure_ != NULL) {
    delete query_failure_;
  }
  query_failure_ = NULL;
}
inline const ::CefAdapter::QueryFailureRequest& ToCefAdapterRequest::_internal_query_failure() const {
  return *query_failure_;
}
inline const ::CefAdapter::QueryFailureRequest& ToCefAdapterRequest::query_failure() const {
  const ::CefAdapter::QueryFailureRequest* p = query_failure_;
  // @@protoc_insertion_point(field_get:CefAdapter.ToCefAdapterRequest.query_failure)
  return p != NULL ? *p : *reinterpret_cast<const ::CefAdapter::QueryFailureRequest*>(
      &::CefAdapter::_QueryFailureRequest_default_instance_);
}
inline ::CefAdapter::QueryFailureRequest* ToCefAdapterRequest::release_query_failure() {
  // @@protoc_insertion_point(field_release:CefAdapter.ToCefAdapterRequest.query_failure)
  
  ::CefAdapter::QueryFailureRequest* temp = query_failure_;
  query_failure_ = NULL;
  return temp;
}
inline ::CefAdapter::QueryFailureRequest* ToCefAdapterRequest::mutable_query_failure() {
  
  if (query_failure_ == NULL) {
    auto* p = CreateMaybeMessage<::CefAdapter::QueryFailureRequest>(GetArenaNoVirtual());
    query_failure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.ToCefAdapterRequest.query_failure)
  return query_failure_;
}
inline void ToCefAdapterRequest::set_allocated_query_failure(::CefAdapter::QueryFailureRequest* query_failure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_failure_;
  }
  if (query_failure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query_failure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query_failure, submessage_arena);
    }
    
  } else {
    
  }
  query_failure_ = query_failure;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.ToCefAdapterRequest.query_failure)
}

// -------------------------------------------------------------------

// OnBrowserCreatedRequest

// int32 browser_id = 1;
inline void OnBrowserCreatedRequest::clear_browser_id() {
  browser_id_ = 0;
}
inline ::google::protobuf::int32 OnBrowserCreatedRequest::browser_id() const {
  // @@protoc_insertion_point(field_get:CefAdapter.OnBrowserCreatedRequest.browser_id)
  return browser_id_;
}
inline void OnBrowserCreatedRequest::set_browser_id(::google::protobuf::int32 value) {
  
  browser_id_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.OnBrowserCreatedRequest.browser_id)
}

// -------------------------------------------------------------------

// OnBrowserClosedRequest

// int32 browser_id = 1;
inline void OnBrowserClosedRequest::clear_browser_id() {
  browser_id_ = 0;
}
inline ::google::protobuf::int32 OnBrowserClosedRequest::browser_id() const {
  // @@protoc_insertion_point(field_get:CefAdapter.OnBrowserClosedRequest.browser_id)
  return browser_id_;
}
inline void OnBrowserClosedRequest::set_browser_id(::google::protobuf::int32 value) {
  
  browser_id_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.OnBrowserClosedRequest.browser_id)
}

// -------------------------------------------------------------------

// OnContextCreatedRequest

// int32 browser_id = 1;
inline void OnContextCreatedRequest::clear_browser_id() {
  browser_id_ = 0;
}
inline ::google::protobuf::int32 OnContextCreatedRequest::browser_id() const {
  // @@protoc_insertion_point(field_get:CefAdapter.OnContextCreatedRequest.browser_id)
  return browser_id_;
}
inline void OnContextCreatedRequest::set_browser_id(::google::protobuf::int32 value) {
  
  browser_id_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.OnContextCreatedRequest.browser_id)
}

// int64 frame_id = 2;
inline void OnContextCreatedRequest::clear_frame_id() {
  frame_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OnContextCreatedRequest::frame_id() const {
  // @@protoc_insertion_point(field_get:CefAdapter.OnContextCreatedRequest.frame_id)
  return frame_id_;
}
inline void OnContextCreatedRequest::set_frame_id(::google::protobuf::int64 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.OnContextCreatedRequest.frame_id)
}

// -------------------------------------------------------------------

// OnQueryRequest

// int32 browser_id = 1;
inline void OnQueryRequest::clear_browser_id() {
  browser_id_ = 0;
}
inline ::google::protobuf::int32 OnQueryRequest::browser_id() const {
  // @@protoc_insertion_point(field_get:CefAdapter.OnQueryRequest.browser_id)
  return browser_id_;
}
inline void OnQueryRequest::set_browser_id(::google::protobuf::int32 value) {
  
  browser_id_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.OnQueryRequest.browser_id)
}

// int64 frame_id = 2;
inline void OnQueryRequest::clear_frame_id() {
  frame_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OnQueryRequest::frame_id() const {
  // @@protoc_insertion_point(field_get:CefAdapter.OnQueryRequest.frame_id)
  return frame_id_;
}
inline void OnQueryRequest::set_frame_id(::google::protobuf::int64 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.OnQueryRequest.frame_id)
}

// int64 query_id = 3;
inline void OnQueryRequest::clear_query_id() {
  query_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OnQueryRequest::query_id() const {
  // @@protoc_insertion_point(field_get:CefAdapter.OnQueryRequest.query_id)
  return query_id_;
}
inline void OnQueryRequest::set_query_id(::google::protobuf::int64 value) {
  
  query_id_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.OnQueryRequest.query_id)
}

// string query = 4;
inline void OnQueryRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnQueryRequest::query() const {
  // @@protoc_insertion_point(field_get:CefAdapter.OnQueryRequest.query)
  return query_.GetNoArena();
}
inline void OnQueryRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CefAdapter.OnQueryRequest.query)
}
#if LANG_CXX11
inline void OnQueryRequest::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CefAdapter.OnQueryRequest.query)
}
#endif
inline void OnQueryRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CefAdapter.OnQueryRequest.query)
}
inline void OnQueryRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CefAdapter.OnQueryRequest.query)
}
inline ::std::string* OnQueryRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:CefAdapter.OnQueryRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnQueryRequest::release_query() {
  // @@protoc_insertion_point(field_release:CefAdapter.OnQueryRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnQueryRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.OnQueryRequest.query)
}

// -------------------------------------------------------------------

// FromCefAdapterRequest

// .CefAdapter.FromCefAdapterRequestType request_type = 1;
inline void FromCefAdapterRequest::clear_request_type() {
  request_type_ = 0;
}
inline ::CefAdapter::FromCefAdapterRequestType FromCefAdapterRequest::request_type() const {
  // @@protoc_insertion_point(field_get:CefAdapter.FromCefAdapterRequest.request_type)
  return static_cast< ::CefAdapter::FromCefAdapterRequestType >(request_type_);
}
inline void FromCefAdapterRequest::set_request_type(::CefAdapter::FromCefAdapterRequestType value) {
  
  request_type_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.FromCefAdapterRequest.request_type)
}

// .CefAdapter.OnBrowserCreatedRequest on_browser_created = 2;
inline bool FromCefAdapterRequest::has_on_browser_created() const {
  return this != internal_default_instance() && on_browser_created_ != NULL;
}
inline void FromCefAdapterRequest::clear_on_browser_created() {
  if (GetArenaNoVirtual() == NULL && on_browser_created_ != NULL) {
    delete on_browser_created_;
  }
  on_browser_created_ = NULL;
}
inline const ::CefAdapter::OnBrowserCreatedRequest& FromCefAdapterRequest::_internal_on_browser_created() const {
  return *on_browser_created_;
}
inline const ::CefAdapter::OnBrowserCreatedRequest& FromCefAdapterRequest::on_browser_created() const {
  const ::CefAdapter::OnBrowserCreatedRequest* p = on_browser_created_;
  // @@protoc_insertion_point(field_get:CefAdapter.FromCefAdapterRequest.on_browser_created)
  return p != NULL ? *p : *reinterpret_cast<const ::CefAdapter::OnBrowserCreatedRequest*>(
      &::CefAdapter::_OnBrowserCreatedRequest_default_instance_);
}
inline ::CefAdapter::OnBrowserCreatedRequest* FromCefAdapterRequest::release_on_browser_created() {
  // @@protoc_insertion_point(field_release:CefAdapter.FromCefAdapterRequest.on_browser_created)
  
  ::CefAdapter::OnBrowserCreatedRequest* temp = on_browser_created_;
  on_browser_created_ = NULL;
  return temp;
}
inline ::CefAdapter::OnBrowserCreatedRequest* FromCefAdapterRequest::mutable_on_browser_created() {
  
  if (on_browser_created_ == NULL) {
    auto* p = CreateMaybeMessage<::CefAdapter::OnBrowserCreatedRequest>(GetArenaNoVirtual());
    on_browser_created_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.FromCefAdapterRequest.on_browser_created)
  return on_browser_created_;
}
inline void FromCefAdapterRequest::set_allocated_on_browser_created(::CefAdapter::OnBrowserCreatedRequest* on_browser_created) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete on_browser_created_;
  }
  if (on_browser_created) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      on_browser_created = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, on_browser_created, submessage_arena);
    }
    
  } else {
    
  }
  on_browser_created_ = on_browser_created;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.FromCefAdapterRequest.on_browser_created)
}

// .CefAdapter.OnBrowserClosedRequest on_browser_closed = 3;
inline bool FromCefAdapterRequest::has_on_browser_closed() const {
  return this != internal_default_instance() && on_browser_closed_ != NULL;
}
inline void FromCefAdapterRequest::clear_on_browser_closed() {
  if (GetArenaNoVirtual() == NULL && on_browser_closed_ != NULL) {
    delete on_browser_closed_;
  }
  on_browser_closed_ = NULL;
}
inline const ::CefAdapter::OnBrowserClosedRequest& FromCefAdapterRequest::_internal_on_browser_closed() const {
  return *on_browser_closed_;
}
inline const ::CefAdapter::OnBrowserClosedRequest& FromCefAdapterRequest::on_browser_closed() const {
  const ::CefAdapter::OnBrowserClosedRequest* p = on_browser_closed_;
  // @@protoc_insertion_point(field_get:CefAdapter.FromCefAdapterRequest.on_browser_closed)
  return p != NULL ? *p : *reinterpret_cast<const ::CefAdapter::OnBrowserClosedRequest*>(
      &::CefAdapter::_OnBrowserClosedRequest_default_instance_);
}
inline ::CefAdapter::OnBrowserClosedRequest* FromCefAdapterRequest::release_on_browser_closed() {
  // @@protoc_insertion_point(field_release:CefAdapter.FromCefAdapterRequest.on_browser_closed)
  
  ::CefAdapter::OnBrowserClosedRequest* temp = on_browser_closed_;
  on_browser_closed_ = NULL;
  return temp;
}
inline ::CefAdapter::OnBrowserClosedRequest* FromCefAdapterRequest::mutable_on_browser_closed() {
  
  if (on_browser_closed_ == NULL) {
    auto* p = CreateMaybeMessage<::CefAdapter::OnBrowserClosedRequest>(GetArenaNoVirtual());
    on_browser_closed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.FromCefAdapterRequest.on_browser_closed)
  return on_browser_closed_;
}
inline void FromCefAdapterRequest::set_allocated_on_browser_closed(::CefAdapter::OnBrowserClosedRequest* on_browser_closed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete on_browser_closed_;
  }
  if (on_browser_closed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      on_browser_closed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, on_browser_closed, submessage_arena);
    }
    
  } else {
    
  }
  on_browser_closed_ = on_browser_closed;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.FromCefAdapterRequest.on_browser_closed)
}

// .CefAdapter.OnContextCreatedRequest on_context_created = 4;
inline bool FromCefAdapterRequest::has_on_context_created() const {
  return this != internal_default_instance() && on_context_created_ != NULL;
}
inline void FromCefAdapterRequest::clear_on_context_created() {
  if (GetArenaNoVirtual() == NULL && on_context_created_ != NULL) {
    delete on_context_created_;
  }
  on_context_created_ = NULL;
}
inline const ::CefAdapter::OnContextCreatedRequest& FromCefAdapterRequest::_internal_on_context_created() const {
  return *on_context_created_;
}
inline const ::CefAdapter::OnContextCreatedRequest& FromCefAdapterRequest::on_context_created() const {
  const ::CefAdapter::OnContextCreatedRequest* p = on_context_created_;
  // @@protoc_insertion_point(field_get:CefAdapter.FromCefAdapterRequest.on_context_created)
  return p != NULL ? *p : *reinterpret_cast<const ::CefAdapter::OnContextCreatedRequest*>(
      &::CefAdapter::_OnContextCreatedRequest_default_instance_);
}
inline ::CefAdapter::OnContextCreatedRequest* FromCefAdapterRequest::release_on_context_created() {
  // @@protoc_insertion_point(field_release:CefAdapter.FromCefAdapterRequest.on_context_created)
  
  ::CefAdapter::OnContextCreatedRequest* temp = on_context_created_;
  on_context_created_ = NULL;
  return temp;
}
inline ::CefAdapter::OnContextCreatedRequest* FromCefAdapterRequest::mutable_on_context_created() {
  
  if (on_context_created_ == NULL) {
    auto* p = CreateMaybeMessage<::CefAdapter::OnContextCreatedRequest>(GetArenaNoVirtual());
    on_context_created_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.FromCefAdapterRequest.on_context_created)
  return on_context_created_;
}
inline void FromCefAdapterRequest::set_allocated_on_context_created(::CefAdapter::OnContextCreatedRequest* on_context_created) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete on_context_created_;
  }
  if (on_context_created) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      on_context_created = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, on_context_created, submessage_arena);
    }
    
  } else {
    
  }
  on_context_created_ = on_context_created;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.FromCefAdapterRequest.on_context_created)
}

// .CefAdapter.OnQueryRequest on_query = 5;
inline bool FromCefAdapterRequest::has_on_query() const {
  return this != internal_default_instance() && on_query_ != NULL;
}
inline void FromCefAdapterRequest::clear_on_query() {
  if (GetArenaNoVirtual() == NULL && on_query_ != NULL) {
    delete on_query_;
  }
  on_query_ = NULL;
}
inline const ::CefAdapter::OnQueryRequest& FromCefAdapterRequest::_internal_on_query() const {
  return *on_query_;
}
inline const ::CefAdapter::OnQueryRequest& FromCefAdapterRequest::on_query() const {
  const ::CefAdapter::OnQueryRequest* p = on_query_;
  // @@protoc_insertion_point(field_get:CefAdapter.FromCefAdapterRequest.on_query)
  return p != NULL ? *p : *reinterpret_cast<const ::CefAdapter::OnQueryRequest*>(
      &::CefAdapter::_OnQueryRequest_default_instance_);
}
inline ::CefAdapter::OnQueryRequest* FromCefAdapterRequest::release_on_query() {
  // @@protoc_insertion_point(field_release:CefAdapter.FromCefAdapterRequest.on_query)
  
  ::CefAdapter::OnQueryRequest* temp = on_query_;
  on_query_ = NULL;
  return temp;
}
inline ::CefAdapter::OnQueryRequest* FromCefAdapterRequest::mutable_on_query() {
  
  if (on_query_ == NULL) {
    auto* p = CreateMaybeMessage<::CefAdapter::OnQueryRequest>(GetArenaNoVirtual());
    on_query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.FromCefAdapterRequest.on_query)
  return on_query_;
}
inline void FromCefAdapterRequest::set_allocated_on_query(::CefAdapter::OnQueryRequest* on_query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete on_query_;
  }
  if (on_query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      on_query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, on_query, submessage_arena);
    }
    
  } else {
    
  }
  on_query_ = on_query;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.FromCefAdapterRequest.on_query)
}

// -------------------------------------------------------------------

// CefAdapterException

// int32 error_code = 1;
inline void CefAdapterException::clear_error_code() {
  error_code_ = 0;
}
inline ::google::protobuf::int32 CefAdapterException::error_code() const {
  // @@protoc_insertion_point(field_get:CefAdapter.CefAdapterException.error_code)
  return error_code_;
}
inline void CefAdapterException::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.CefAdapterException.error_code)
}

// string error_message = 2;
inline void CefAdapterException::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CefAdapterException::error_message() const {
  // @@protoc_insertion_point(field_get:CefAdapter.CefAdapterException.error_message)
  return error_message_.GetNoArena();
}
inline void CefAdapterException::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CefAdapter.CefAdapterException.error_message)
}
#if LANG_CXX11
inline void CefAdapterException::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CefAdapter.CefAdapterException.error_message)
}
#endif
inline void CefAdapterException::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CefAdapter.CefAdapterException.error_message)
}
inline void CefAdapterException::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CefAdapter.CefAdapterException.error_message)
}
inline ::std::string* CefAdapterException::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:CefAdapter.CefAdapterException.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CefAdapterException::release_error_message() {
  // @@protoc_insertion_point(field_release:CefAdapter.CefAdapterException.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CefAdapterException::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.CefAdapterException.error_message)
}

// -------------------------------------------------------------------

// CefAdapterReply

// .CefAdapter.ReplyType reply_type = 1;
inline void CefAdapterReply::clear_reply_type() {
  reply_type_ = 0;
}
inline ::CefAdapter::ReplyType CefAdapterReply::reply_type() const {
  // @@protoc_insertion_point(field_get:CefAdapter.CefAdapterReply.reply_type)
  return static_cast< ::CefAdapter::ReplyType >(reply_type_);
}
inline void CefAdapterReply::set_reply_type(::CefAdapter::ReplyType value) {
  
  reply_type_ = value;
  // @@protoc_insertion_point(field_set:CefAdapter.CefAdapterReply.reply_type)
}

// .google.protobuf.BoolValue boolean_value = 2;
inline bool CefAdapterReply::has_boolean_value() const {
  return this != internal_default_instance() && boolean_value_ != NULL;
}
inline const ::google::protobuf::BoolValue& CefAdapterReply::_internal_boolean_value() const {
  return *boolean_value_;
}
inline const ::google::protobuf::BoolValue& CefAdapterReply::boolean_value() const {
  const ::google::protobuf::BoolValue* p = boolean_value_;
  // @@protoc_insertion_point(field_get:CefAdapter.CefAdapterReply.boolean_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* CefAdapterReply::release_boolean_value() {
  // @@protoc_insertion_point(field_release:CefAdapter.CefAdapterReply.boolean_value)
  
  ::google::protobuf::BoolValue* temp = boolean_value_;
  boolean_value_ = NULL;
  return temp;
}
inline ::google::protobuf::BoolValue* CefAdapterReply::mutable_boolean_value() {
  
  if (boolean_value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    boolean_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.CefAdapterReply.boolean_value)
  return boolean_value_;
}
inline void CefAdapterReply::set_allocated_boolean_value(::google::protobuf::BoolValue* boolean_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(boolean_value_);
  }
  if (boolean_value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(boolean_value)->GetArena();
    if (message_arena != submessage_arena) {
      boolean_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, boolean_value, submessage_arena);
    }
    
  } else {
    
  }
  boolean_value_ = boolean_value;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.CefAdapterReply.boolean_value)
}

// .google.protobuf.Int32Value integer_value = 3;
inline bool CefAdapterReply::has_integer_value() const {
  return this != internal_default_instance() && integer_value_ != NULL;
}
inline const ::google::protobuf::Int32Value& CefAdapterReply::_internal_integer_value() const {
  return *integer_value_;
}
inline const ::google::protobuf::Int32Value& CefAdapterReply::integer_value() const {
  const ::google::protobuf::Int32Value* p = integer_value_;
  // @@protoc_insertion_point(field_get:CefAdapter.CefAdapterReply.integer_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Int32Value*>(
      &::google::protobuf::_Int32Value_default_instance_);
}
inline ::google::protobuf::Int32Value* CefAdapterReply::release_integer_value() {
  // @@protoc_insertion_point(field_release:CefAdapter.CefAdapterReply.integer_value)
  
  ::google::protobuf::Int32Value* temp = integer_value_;
  integer_value_ = NULL;
  return temp;
}
inline ::google::protobuf::Int32Value* CefAdapterReply::mutable_integer_value() {
  
  if (integer_value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int32Value>(GetArenaNoVirtual());
    integer_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.CefAdapterReply.integer_value)
  return integer_value_;
}
inline void CefAdapterReply::set_allocated_integer_value(::google::protobuf::Int32Value* integer_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(integer_value_);
  }
  if (integer_value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(integer_value)->GetArena();
    if (message_arena != submessage_arena) {
      integer_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, integer_value, submessage_arena);
    }
    
  } else {
    
  }
  integer_value_ = integer_value;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.CefAdapterReply.integer_value)
}

// .google.protobuf.DoubleValue double_value = 4;
inline bool CefAdapterReply::has_double_value() const {
  return this != internal_default_instance() && double_value_ != NULL;
}
inline const ::google::protobuf::DoubleValue& CefAdapterReply::_internal_double_value() const {
  return *double_value_;
}
inline const ::google::protobuf::DoubleValue& CefAdapterReply::double_value() const {
  const ::google::protobuf::DoubleValue* p = double_value_;
  // @@protoc_insertion_point(field_get:CefAdapter.CefAdapterReply.double_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::DoubleValue*>(
      &::google::protobuf::_DoubleValue_default_instance_);
}
inline ::google::protobuf::DoubleValue* CefAdapterReply::release_double_value() {
  // @@protoc_insertion_point(field_release:CefAdapter.CefAdapterReply.double_value)
  
  ::google::protobuf::DoubleValue* temp = double_value_;
  double_value_ = NULL;
  return temp;
}
inline ::google::protobuf::DoubleValue* CefAdapterReply::mutable_double_value() {
  
  if (double_value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::DoubleValue>(GetArenaNoVirtual());
    double_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.CefAdapterReply.double_value)
  return double_value_;
}
inline void CefAdapterReply::set_allocated_double_value(::google::protobuf::DoubleValue* double_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(double_value_);
  }
  if (double_value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(double_value)->GetArena();
    if (message_arena != submessage_arena) {
      double_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, double_value, submessage_arena);
    }
    
  } else {
    
  }
  double_value_ = double_value;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.CefAdapterReply.double_value)
}

// .google.protobuf.StringValue string_value = 5;
inline bool CefAdapterReply::has_string_value() const {
  return this != internal_default_instance() && string_value_ != NULL;
}
inline const ::google::protobuf::StringValue& CefAdapterReply::_internal_string_value() const {
  return *string_value_;
}
inline const ::google::protobuf::StringValue& CefAdapterReply::string_value() const {
  const ::google::protobuf::StringValue* p = string_value_;
  // @@protoc_insertion_point(field_get:CefAdapter.CefAdapterReply.string_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* CefAdapterReply::release_string_value() {
  // @@protoc_insertion_point(field_release:CefAdapter.CefAdapterReply.string_value)
  
  ::google::protobuf::StringValue* temp = string_value_;
  string_value_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* CefAdapterReply::mutable_string_value() {
  
  if (string_value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    string_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.CefAdapterReply.string_value)
  return string_value_;
}
inline void CefAdapterReply::set_allocated_string_value(::google::protobuf::StringValue* string_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(string_value_);
  }
  if (string_value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(string_value)->GetArena();
    if (message_arena != submessage_arena) {
      string_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, string_value, submessage_arena);
    }
    
  } else {
    
  }
  string_value_ = string_value;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.CefAdapterReply.string_value)
}

// .CefAdapter.CefAdapterException exception = 6;
inline bool CefAdapterReply::has_exception() const {
  return this != internal_default_instance() && exception_ != NULL;
}
inline void CefAdapterReply::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) {
    delete exception_;
  }
  exception_ = NULL;
}
inline const ::CefAdapter::CefAdapterException& CefAdapterReply::_internal_exception() const {
  return *exception_;
}
inline const ::CefAdapter::CefAdapterException& CefAdapterReply::exception() const {
  const ::CefAdapter::CefAdapterException* p = exception_;
  // @@protoc_insertion_point(field_get:CefAdapter.CefAdapterReply.exception)
  return p != NULL ? *p : *reinterpret_cast<const ::CefAdapter::CefAdapterException*>(
      &::CefAdapter::_CefAdapterException_default_instance_);
}
inline ::CefAdapter::CefAdapterException* CefAdapterReply::release_exception() {
  // @@protoc_insertion_point(field_release:CefAdapter.CefAdapterReply.exception)
  
  ::CefAdapter::CefAdapterException* temp = exception_;
  exception_ = NULL;
  return temp;
}
inline ::CefAdapter::CefAdapterException* CefAdapterReply::mutable_exception() {
  
  if (exception_ == NULL) {
    auto* p = CreateMaybeMessage<::CefAdapter::CefAdapterException>(GetArenaNoVirtual());
    exception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CefAdapter.CefAdapterReply.exception)
  return exception_;
}
inline void CefAdapterReply::set_allocated_exception(::CefAdapter::CefAdapterException* exception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete exception_;
  }
  if (exception) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    
  } else {
    
  }
  exception_ = exception;
  // @@protoc_insertion_point(field_set_allocated:CefAdapter.CefAdapterReply.exception)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CefAdapter

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CefAdapter::ReplyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CefAdapter::ReplyType>() {
  return ::CefAdapter::ReplyType_descriptor();
}
template <> struct is_proto_enum< ::CefAdapter::ToCefAdapterRequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CefAdapter::ToCefAdapterRequestType>() {
  return ::CefAdapter::ToCefAdapterRequestType_descriptor();
}
template <> struct is_proto_enum< ::CefAdapter::FromCefAdapterRequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CefAdapter::FromCefAdapterRequestType>() {
  return ::CefAdapter::FromCefAdapterRequestType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_IpcMessages_2eproto
